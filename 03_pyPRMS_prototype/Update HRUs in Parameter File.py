# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:percent
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.13.7
#   kernelspec:
#     display_name: Python [conda env:prms_py3]
#     language: python
#     name: conda-env-prms_py3-py
# ---

# %% language="javascript"
# IPython.notebook.kernel.restart()

# %%
import glob
import os
import pandas as pd
import sys

from pyPRMS.ParameterFile import ParameterFile
from pyPRMS.ControlFile import ControlFile
from pyPRMS.ValidParams import ValidParams

# %%
workdir = '/Users/pnorton/Projects/National_Hydrology_Model/tmp/nvwsc'

# Original parameter file
src_param_file = f'{workdir}/Desch.params6'

# Altered single-HRU parameter file
hru_param_file = f'{workdir}/results/ALL.SCE_HRU141'

# %% [markdown]
# ### Load original parameter file

# %%
pfile_orig = ParameterFile(src_param_file)

# %% [markdown]
# ### Load altered, single-HRU parameter file

# %%
pfile_hru = ParameterFile(hru_param_file)



# %% [markdown]
# ### Get set of parameters that were altered
# <P>These parameters were overridden within the HRU parameter file (e.g. declared twice)</P>

# %%
print(pfile_hru.updated_params)

# %% [markdown]
# ### Check internal consistency of a parameter
# <P>Checks if number of values for the parameter matches the dimensions declared for the parameter</P>

# %%
pfile_orig.parameters['snarea_curve'].check()

# %% [markdown]
# ### Check all parameters
# <P>Checks internal consistency of all parameters plus any additional constraints or dependencies on other parameters. For example, the number of snarea_curve entries is checked against the number of unique hru_deplcrv values.</P>

# %%
pfile_orig.parameters.check()

# %% [markdown]
# ### Open each single-HRU parameter file and update modified parameters from the original parameter file

# %%
filelist = glob.glob(f'{workdir}/results/ALL.SCE_HRU*')

print(f'Processing {len(filelist)} HRUs')
for cfile in sorted(filelist):
    chru = int(os.path.basename(cfile).split('HRU')[1])

    sys.stdout.write(f'\rUpdating HRU {chru}: {cfile}    ')

    pfile_hru = ParameterFile(cfile)
    
    for cparam in pfile_hru.updated_params:
        # Arrays are 0-based in python
        if cparam == 'snarea_curve':
            # Special handling for snarea_curve
            pfile.parameters[cparam].data.reshape((-1, 11))[chru-1,:] = pfile_hru.parameters[cparam].data
        else:
            pfile.parameters[cparam].data[chru-1] = pfile_hru.parameters[cparam].data[0]

# %%
### Write the parameters to a new parameter file

# %%
pfile.write_parameter_file('calibrated.param', header=['Generated by ParameterFile','version XX'])

# %%

# %%
cc = pfile.parameters['hru_deplcrv'].as_dataframe
cc.head()

# %%
if bb.index.size != cc.size:
    print('More snarea_curve values specified than required by hru_deplcrv entries')

# %%
bb.rename(columns={k: k+1 for k in bb.columns},
          index={k: k+1 for k in bb.index}, inplace=True)

# %%
bb.head()

# %%
